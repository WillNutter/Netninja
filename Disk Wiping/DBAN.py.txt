import os
import subprocess

def list_drives_linux():
    """
    List available drives on a Linux system using `lsblk`.
    """
    try:
        # Run the lsblk command to list drives and their partitions
        result = subprocess.run(["lsblk", "-o", "NAME,SIZE,TYPE,MOUNTPOINT"], capture_output=True, text=True, check=True)
        print("Available Drives:")
        print(result.stdout)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Error listing drives: {e}")
        return None

def list_drives_windows():
    """
    List available drives on Windows using `diskpart`.
    """
    try:
        # Run the diskpart command to list drives
        result = subprocess.run(["diskpart", "/s", "list_drives.txt"], capture_output=True, text=True, check=True)
        print("Available Drives:")
        print(result.stdout)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Error listing drives: {e}")
        return None

def select_drive():
    """
    Ask user to select the drive to wipe.
    """
    drive = input("Enter the name of the drive you want to wipe (e.g., /dev/sda on Linux or Disk 0 on Windows): ")
    return drive

def select_wipe_format():
    """
    Ask user for the wipe format (e.g., number of passes).
    """
    wipe_format = input("Enter the number of passes for the wipe (1 for a single pass of zeros): ")
    return int(wipe_format)

def wipe_drive_linux(drive, passes):
    """
    Wipe the selected drive on Linux using dd.
    """
    try:
        # Warning message before proceeding with wipe
        print(f"WARNING: You are about to wipe the drive {drive}. This action is irreversible!")
        confirmation = input(f"Are you sure you want to wipe {drive}? (yes/no): ").strip().lower()

        if confirmation != "yes":
            print("Operation cancelled.")
            return

        # Wipe the drive with zeros (dd command)
        command = f"sudo dd if=/dev/zero of={drive} bs=1M count=0 seek=10000000 status=progress"
        print(f"Wiping drive {drive} with zeros...")
        subprocess.run(command, shell=True, check=True)
        print(f"Drive {drive} wiped successfully!")
    except subprocess.CalledProcessError as e:
        print(f"Error wiping drive {drive}: {e}")

def wipe_drive_windows(drive, passes):
    """
    Wipe the selected drive on Windows using diskpart (or alternative).
    """
    try:
        # Warning message before proceeding with wipe
        print(f"WARNING: You are about to wipe the drive {drive}. This action is irreversible!")
        confirmation = input(f"Are you sure you want to wipe {drive}? (yes/no): ").strip().lower()

        if confirmation != "yes":
            print("Operation cancelled.")
            return

        # Create a temporary script for diskpart to select and wipe the drive
        with open("wipe_drive.txt", "w") as file:
            file.write(f"select disk {drive}\n")
            file.write("clean all\n")  # 'clean all' wipes the drive securely
            file.write("exit\n")

        # Execute the diskpart script
        subprocess.run(["diskpart", "/s", "wipe_drive.txt"], check=True)
        print(f"Drive {drive} wiped successfully!")
    except subprocess.CalledProcessError as e:
        print(f"Error wiping drive {drive}: {e}")
    finally:
        # Clean up the temporary script
        if os.path.exists("wipe_drive.txt"):
            os.remove("wipe_drive.txt")

def main():
    # Determine the platform (Linux or Windows)
    if os.name == 'posix':
        # Linux-specific code
        drives = list_drives_linux()
        if drives:
            drive = select_drive()
            passes = select_wipe_format()
            wipe_drive_linux(drive, passes)
    elif os.name == 'nt':
        # Windows-specific code
        drives = list_drives_windows()
        if drives:
            drive = select_drive()
            passes = select_wipe_format()
            wipe_drive_windows(drive, passes)
    else:
        print("Unsupported OS.")

if __name__ == "__main__":
    main()
