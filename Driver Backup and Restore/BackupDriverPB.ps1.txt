<# 
    Driver Backup & Restore Utility
    ----------------------------------------------------
    • Requires: Windows 10/11, PowerShell (Admin)
    • Backup:  Export-WindowsDriver (all drivers)
    • Restore: PnPUtil.exe (via .INF files)
#>

# ------------------  GLOBAL SETTINGS  ------------------
$global:BackupDir = Join-Path $env:USERPROFILE ("DriverBackup_{0:yyyyMMdd_HHmmss}" -f (Get-Date))

# ------------------  HELPER FUNCTIONS  -----------------
function Show-Menu {
    cls
    Write-Host "==========================================" -ForegroundColor Cyan
    Write-Host "  Driver Backup & Restore Utility"         -ForegroundColor Cyan
    Write-Host "==========================================" -ForegroundColor Cyan
    Write-Host "Current backup directory:`n$BackupDir`n"
    Write-Host "1) Back up drivers → $BackupDir"
    Write-Host "2) Set / change backup directory"
    Write-Host "3) Re-install drivers from backup directory"
    Write-Host "4) Compress backup folder to ZIP"
    Write-Host "5) Exit"
}

function Backup-Drivers {
    if (!(Test-Path $BackupDir)) {
        New-Item -ItemType Directory -Path $BackupDir -Force | Out-Null
    }

    Write-Host "`nCollecting drivers for backup …" -ForegroundColor Yellow

    try {
        $drivers = Export-WindowsDriver -Online
        $total   = $drivers.Count
        $i       = 0

        foreach ($drv in $drivers) {
            $i++
            $progress = [int](($i / $total) * 100)
            Write-Progress -Activity "Exporting drivers" -Status "$i of $total: $($drv.OriginalFileName)" -PercentComplete $progress

            $sourceFile   = $drv.OriginalFileName
            $relativePath = $sourceFile.Substring(3)  # strip drive letter (e.g., C:\)
            $destPath     = Join-Path $BackupDir $relativePath

            $destDir = Split-Path $destPath -Parent
            if (!(Test-Path $destDir)) {
                New-Item -ItemType Directory -Path $destDir -Force | Out-Null
            }

            Copy-Item -Path $sourceFile -Destination $destPath -Force -ErrorAction SilentlyContinue
        }

        Write-Progress -Activity "Exporting drivers" -Completed
        Write-Host "`nAll drivers backed up to:`n$BackupDir`n" -ForegroundColor Green
    }
    catch {
        Write-Host "Backup failed:`n$($_.Exception.Message)`n" -ForegroundColor Red
    }

    Read-Host 'Press Enter to continue…'
}

function Set-BackupDirectory {
    $newDir = Read-Host "Enter full path for the backup folder"
    if ([string]::IsNullOrWhiteSpace($newDir)) { return }
    try {
        if (!(Test-Path $newDir)) {
            New-Item -ItemType Directory -Path $newDir -Force | Out-Null
        }
        $global:BackupDir = (Resolve-Path $newDir).Path
        Write-Host "Backup directory set to $BackupDir`n" -ForegroundColor Green
    }
    catch {
        Write-Host "Could not set directory:`n$($_.Exception.Message)`n" -ForegroundColor Red
    }
    Read-Host 'Press Enter to continue…'
}

function Compress-Backup {
    if (!(Test-Path $BackupDir)) {
        Write-Host "`nNo backup folder found. Run a backup first (option 1) or set the directory (option 2).`n" -ForegroundColor Red
        Read-Host 'Press Enter to continue…'
        return
    }

    $zipPath = "$BackupDir.zip"
    if (Test-Path $zipPath) {
        Remove-Item $zipPath -Force
    }

    Write-Host "`nCompressing $BackupDir …" -ForegroundColor Yellow
    try {
        Compress-Archive -Path "$BackupDir\*" -DestinationPath $zipPath -CompressionLevel Optimal -Force
        Write-Host "`nZIP created:`n$zipPath`n" -ForegroundColor Green
    }
    catch {
        Write-Host "Compression failed:`n$($_.Exception.Message)`n" -ForegroundColor Red
    }
    Read-Host 'Press Enter to continue…'
}

function Restore-Drivers {
    if (!(Test-Path $BackupDir)) {
        Write-Host "`nBackup directory does not exist. Set it first (option 2).`n" -ForegroundColor Red
        Read-Host 'Press Enter to continue…'
        return
    }

    Write-Host "`nRe-installing drivers from $BackupDir …" -ForegroundColor Yellow
    $infFiles = Get-ChildItem -Path $BackupDir -Filter *.inf -Recurse
    if ($infFiles.Count -eq 0) {
        Write-Host "No .inf files found in the backup directory.`n" -ForegroundColor Red
        Read-Host 'Press Enter to continue…'
        return
    }

    $total = $infFiles.Count
    $i     = 0
    foreach ($inf in $infFiles) {
        $i++
        $progress = [int](($i / $total) * 100)
        Write-Progress -Activity "Installing drivers" -Status "$i of $total: $($inf.Name)" -PercentComplete $progress
        & pnputil /add-driver "`"$($inf.FullName)`"" /install | Out-Null
    }
    Write-Progress -Activity "Installing drivers" -Completed

    Write-Host "Driver re-installation completed.`n" -ForegroundColor Green
    Read-Host 'Press Enter to continue…'
}

# ------------------  MAIN PROGRAM LOOP  ----------------
do {
    Show-Menu
    $choice = Read-Host "Select an option (1-5)"
    switch ($choice) {
        '1' { Backup-Drivers }
        '2' { Set-BackupDirectory }
        '3' { Restore-Drivers }
        '4' { Compress-Backup }
        '5' { Write-Host "`nGood-bye!" }
        default {
            Write-Host "`nInvalid selection. Try again.`n" -ForegroundColor Red
            Read-Host 'Press Enter to continue…'
        }
    }
} while ($choice -ne '5')
