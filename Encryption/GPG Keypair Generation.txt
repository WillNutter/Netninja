This library provides an interface to GnuPG, which is a complete and free implementation of the OpenPGP standard. Here's an example script to generate a GPG keypair:
The GPG Key Lengths are - 
RSA: Up to 4096 bits
DSA: Typically up to 3072 bits (but can be used with up to 4096 bits for DSA2, supported in GnuPG 2.1 and later)
ElGamal: Up to 4096 bits (for encryption keys)
ECC (Elliptic Curve Cryptography): Depends on the curve, but commonly used curves include NIST P-256, P-384, and P-521

#pip install python-gnupg
import gnupg

# Initialize GPG
gpg = gnupg.GPG(gnupghome='/path/to/gnupg/home')

# Define key input data
input_data = gpg.gen_key_input(
    name_email='user@example.com',
    passphrase='your_passphrase',
    key_type='RSA',
    key_length=4096,
)

# Generate the key
key = gpg.gen_key(input_data)

# Export the public key
public_key = gpg.export_keys(str(key))

# Export the private key
private_key = gpg.export_keys(str(key), secret=True, passphrase='your_passphrase')

# Save the keys to files
with open('public_key.asc', 'w') as pub_file:
    pub_file.write(public_key)

with open('private_key.asc', 'w') as priv_file:
    priv_file.write(private_key)

print("GPG keypair generated and saved to 'public_key.asc' and 'private_key.asc'")


Explanation:
gnupghome='/path/to/gnupg/home': Specifies the directory where the GPG keyring will be stored.
gpg.gen_key_input: Sets up the parameters for the key generation, such as the email, passphrase, key type, and key length.
gpg.gen_key: Generates the key based on the input data.
gpg.export_keys: Exports the public and private keys to ASCII-armored text.
The keys are saved to files public_key.asc and private_key.asc.
Ensure the directory specified in gnupghome exists and is writable. The passphrase should be securely handled in a real-world scenario.