def multiplicative_decrypt(input_file, output_file, key):
    """
    Decrypt a message encrypted with a multiplicative cipher from input file and save to output file.
    """
    with open(input_file, 'r') as file:
        encrypted_message = file.read()
    
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    
    def mod_inverse(a, m):
        # Find the modular inverse of a under modulo m using the Extended Euclidean Algorithm
        m0, x0, x1 = m, 0, 1
        while a > 1:
            q = a // m
            m, a = a % m, m
            x0, x1 = x1 - q * x0, x0
        return x1 + m0 if x1 < 0 else x1

    inverse_key = mod_inverse(key, 26)
    
    def decrypt_char(char):
        if char.isalpha():
            is_upper = char.isupper()
            idx = alphabet.index(char.upper())
            decrypted_idx = (idx * inverse_key) % 26
            return alphabet[decrypted_idx] if is_upper else alphabet[decrypted_idx].lower()
        return char

    decrypted_message = ''.join(decrypt_char(c) for c in encrypted_message)
    
    with open(output_file, 'w') as file:
        file.write(decrypted_message)

# Example key
key = 7

# Decrypt message from input file and save to output file
multiplicative_decrypt('encrypted.txt', 'decrypted.txt', key)
