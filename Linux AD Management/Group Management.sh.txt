#chmod +x manage_groups.sh
#sudo ./manage_groups.sh

#!/bin/bash

# Define domain name and admin credentials
DOMAIN_NAME="example.com"        # Replace with your domain name
ADMIN_USER="administrator"       # The admin user for the domain
ADMIN_PASSWORD="Password123!"    # The admin password for the domain

# Ensure the script is run as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root. Please use sudo."
    exit 1
fi

# Function to add all users to a specific group on the local system
add_users_to_group() {
    echo "Please enter the group name to which all users will be added:"
    read -p "Group Name: " GROUP_NAME

    if [ -z "$GROUP_NAME" ]; then
        echo "Group name cannot be empty. Exiting."
        exit 1
    fi

    # Get all local users except system users
    USERS=$(getent passwd | awk -F: '{if ($3 >= 1000) print $1}')

    for USER in $USERS; do
        echo "Adding user $USER to group $GROUP_NAME..."
        usermod -a -G "$GROUP_NAME" "$USER"
        
        if [ $? -eq 0 ]; then
            echo "User $USER added to group $GROUP_NAME."
        else
            echo "Failed to add user $USER to group $GROUP_NAME."
        fi
    done
}

# Function to delete a specific group on the local system
delete_group() {
    echo "Please enter the group name you want to delete:"
    read -p "Group Name: " GROUP_NAME

    if [ -z "$GROUP_NAME" ]; then
        echo "Group name cannot be empty. Exiting."
        exit 1
    fi

    echo "Deleting group $GROUP_NAME (users will remain unaffected)..."
    groupdel "$GROUP_NAME"
    
    if [ $? -eq 0 ]; then
        echo "Group $GROUP_NAME deleted successfully."
    else
        echo "Failed to delete group $GROUP_NAME."
    fi
}

# Function to add a specific user to a specific group on the local system
add_user_to_group() {
    echo "Please enter the username to add:"
    read -p "Username: " USERNAME

    echo "Please enter the group name to add the user to:"
    read -p "Group Name: " GROUP_NAME

    if [ -z "$USERNAME" ] || [ -z "$GROUP_NAME" ]; then
        echo "Username and group name cannot be empty. Exiting."
        exit 1
    fi

    echo "Adding user $USERNAME to group $GROUP_NAME..."
    usermod -a -G "$GROUP_NAME" "$USERNAME"

    if [ $? -eq 0 ]; then
        echo "User $USERNAME added to group $GROUP_NAME."
    else
        echo "Failed to add user $USERNAME to group $GROUP_NAME."
    fi
}

# Function to delete a specific user from a specific group on the local system
delete_user_from_group() {
    echo "Please enter the username to remove:"
    read -p "Username: " USERNAME

    echo "Please enter the group name to remove the user from:"
    read -p "Group Name: " GROUP_NAME

    if [ -z "$USERNAME" ] || [ -z "$GROUP_NAME" ]; then
        echo "Username and group name cannot be empty. Exiting."
        exit 1
    fi

    echo "Removing user $USERNAME from group $GROUP_NAME..."
    gpasswd -d "$USERNAME" "$GROUP_NAME"

    if [ $? -eq 0 ]; then
        echo "User $USERNAME removed from group $GROUP_NAME."
    else
        echo "Failed to remove user $USERNAME from group $GROUP_NAME."
    fi
}

# Function to enumerate all groups in the AD domain
enumerate_ad_groups() {
    echo "Enumerating groups in the AD domain..."
    samba-tool group list

    if [ $? -ne 0 ]; then
        echo "Failed to enumerate groups in the AD domain."
        exit 1
    fi
}

# Function to enumerate all groups on the local Linux system
enumerate_local_groups() {
    echo "Enumerating groups on the local Linux server..."
    getent group

    if [ $? -ne 0 ]; then
        echo "Failed to enumerate local groups."
        exit 1
    fi
}

# Main menu
while true; do
    echo "Please select an option:"
    echo "1) Add all users to a specific group"
    echo "2) Delete a specific group (does not delete users)"
    echo "3) Add a specific user to a specific group"
    echo "4) Delete a specific user from a specific group"
    echo "5) Enumerate groups in the AD Domain"
    echo "6) Enumerate groups on the local Linux server"
    echo "7) Exit"

    read -p "Enter your choice (1-7): " choice

    case $choice in
        1)
            add_users_to_group
            ;;
        2)
            delete_group
            ;;
        3)
            add_user_to_group
            ;;
        4)
            delete_user_from_group
            ;;
        5)
            enumerate_ad_groups
            ;;
        6)
            enumerate_local_groups
            ;;
        7)
            echo "Exiting script."
            exit 0
            ;;
        *)
            echo "Invalid choice. Exiting."
            exit 1
            ;;
    esac
done
