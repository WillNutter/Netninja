#chmod +x ad_machine_account_management.sh
#sudo ./ad_machine_account_management.sh

#!/bin/bash

# Ensure the script is run as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root. Please use sudo."
    exit 1
fi

# Function to enumerate every machine on the AD Domain
enumerate_ad_machines() {
    echo "Enumerating all machines in the AD Domain..."
    # List all machines in the AD domain using samba-tool
    samba-tool computer list
}

# Function to enumerate all accounts on a machine within the AD Domain
enumerate_machine_accounts() {
    echo "Enter the machine name to enumerate accounts (FQDN):"
    read -p "Machine Name: " MACHINE_NAME

    if [ -z "$MACHINE_NAME" ]; then
        echo "Machine name cannot be empty. Exiting."
        exit 1
    fi

    echo "Enumerating all accounts on $MACHINE_NAME..."

    # List all AD domain accounts associated with the machine
    # This command lists all users, including machine accounts
    samba-tool user list | grep "$MACHINE_NAME"

    echo "Enumerating local users on $MACHINE_NAME..."
    # List all local accounts on the machine (local Unix users)
    ssh "$MACHINE_NAME" 'getent passwd'
}

# Function to enumerate any local accounts on the machine
enumerate_local_accounts() {
    echo "Enumerating local accounts on the machine..."

    # List local accounts on the Linux machine
    getent passwd | cut -d: -f1
}

# Function to enumerate abnormal accounts on the machine
enumerate_abnormal_accounts() {
    echo "Enumerating abnormal accounts on the machine (non-default, non-AD accounts with high privileges)..."

    # List local users that have UID < 1000 (typically reserved for system users)
    abnormal_accounts=$(getent passwd | awk -F: '$3 < 1000 {print $1}')
    
    # Check for accounts with UID >= 1000 that are not part of the AD domain
    all_accounts=$(getent passwd | cut -d: -f1)
    ad_accounts=$(samba-tool user list)

    for account in $all_accounts; do
        if ! echo "$ad_accounts" | grep -q "$account"; then
            # Check if the account has high privileges (e.g., UID 0 or belongs to sudo or admin groups)
            if id "$account" | grep -E "uid=0|sudo|admin"; then
                echo "Abnormal account found: $account"
            fi
        fi
    done
}

# Function to delete an account on a machine controlled by the Linux AD Domain
delete_account() {
    echo "Enter the account to delete (both local and domain accounts are supported):"
    read -p "Account Name: " ACCOUNT_NAME

    if [ -z "$ACCOUNT_NAME" ]; then
        echo "Account name cannot be empty. Exiting."
        exit 1
    fi

    echo "Deleting account $ACCOUNT_NAME..."

    # Delete domain user account
    samba-tool user delete "$ACCOUNT_NAME"
    
    if [ $? -eq 0 ]; then
        echo "Account $ACCOUNT_NAME deleted from AD Domain."
    else
        echo "Failed to delete account $ACCOUNT_NAME from AD Domain or account not found."
    fi

    # Delete local account
    userdel -r "$ACCOUNT_NAME"
    
    if [ $? -eq 0 ]; then
        echo "Local account $ACCOUNT_NAME deleted successfully."
    else
        echo "Failed to delete local account $ACCOUNT_NAME."
    fi
}

# Function to add an account to the machine from the AD Domain
add_account_to_machine() {
    echo "Enter the username to add to the machine (from AD Domain):"
    read -p "Account Name: " ACCOUNT_NAME

    if [ -z "$ACCOUNT_NAME" ]; then
        echo "Account name cannot be empty. Exiting."
        exit 1
    fi

    echo "Adding account $ACCOUNT_NAME to the machine..."

    # Check if the user exists in the AD Domain
    if ! samba-tool user show "$ACCOUNT_NAME" &>/dev/null; then
        echo "User $ACCOUNT_NAME not found in the AD Domain."
        exit 1
    fi

    # Add the user to the local machine (add to sudoers or specific group as needed)
    useradd "$ACCOUNT_NAME"
    usermod -aG sudo "$ACCOUNT_NAME"  # Grant sudo access (modify based on your policy)

    # Create the user home directory if needed
    mkdir -p /home/"$ACCOUNT_NAME"
    chown "$ACCOUNT_NAME":"$ACCOUNT_NAME" /home/"$ACCOUNT_NAME"

    echo "Account $ACCOUNT_NAME added to the local machine successfully."
}

# Main menu for the script
while true; do
    echo "Domain Machine and Account Management Menu"
    echo "1) Enumerate all machines in the AD Domain"
    echo "2) Enumerate all accounts on a specific machine in the AD Domain"
    echo "3) Enumerate local accounts on the local machine"
    echo "4) Enumerate abnormal accounts (non-default, non-AD, elevated privileges)"
    echo "5) Delete an account on any machine controlled by the Linux AD Domain"
    echo "6) Add an account to the machine that is part of the AD Domain"
    echo "7) Exit"

    read -p "Enter your choice (1-7): " choice

    case $choice in
        1) enumerate_ad_machines ;;
        2) enumerate_machine_accounts ;;
        3) enumerate_local_accounts ;;
        4) enumerate_abnormal_accounts ;;
        5) delete_account ;;
        6) add_account_to_machine ;;
        7) echo "Exiting script."; exit 0 ;;
        *) echo "Invalid choice, please select a valid option." ;;
    esac
done
